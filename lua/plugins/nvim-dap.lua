-- return {
-- 	"mfussenegger/nvim-dap",
-- 	dependencies = {
-- 		"rcarriga/nvim-dap-ui",
-- 		-- virtual text for the debugger
-- 		{
-- 			"theHamsta/nvim-dap-virtual-text",
-- 			opts = {},
-- 		},
-- 		{
-- 			"jay-babu/mason-nvim-dap.nvim",
-- 			dependencies = "mason.nvim",
-- 			cmd = { "DapInstall", "DapUninstall" },
-- 			opts = {
-- 				-- Makes a best effort to setup the various debuggers with
-- 				-- reasonable debug configurations
-- 				automatic_installation = true,
--
-- 				-- You can provide additional configuration to the handlers,
-- 				-- see mason-nvim-dap README for more information
-- 				handlers = {},
--
-- 				-- You'll need to check that you have the required things installed
-- 				-- online, please don't ask me how to install them :)
-- 				ensure_installed = {
-- 					"codelldb"
-- 				},
-- 			},
-- 			-- mason-nvim-dap is loaded when nvim-dap loads
-- 			config = function() end,
-- 		},
-- 		{
-- 			"rcarriga/nvim-dap-ui",
-- 			dependencies = { "nvim-neotest/nvim-nio" },
-- 			-- stylua: ignore
-- 			keys = {
-- 				{ "<leader>du", function() require("dapui").toggle({}) end, desc = "Dap UI" },
-- 				{ "<leader>de", function() require("dapui").eval() end,     desc = "Eval",  mode = { "n", "v" } },
-- 			},
-- 			opts = {},
-- 			config = function(_, opts)
-- 				local dap = require("dap")
-- 				local dapui = require("dapui")
-- 				dapui.setup(opts)
-- 				dap.listeners.after.event_initialized["dapui_config"] = function()
-- 					dapui.open({})
-- 				end
-- 				dap.listeners.before.event_terminated["dapui_config"] = function()
-- 					dapui.close({})
-- 				end
-- 				dap.listeners.before.event_exited["dapui_config"] = function()
-- 					dapui.close({})
-- 				end
-- 			end,
-- 		},
-- 	},
-- 	keys = {
-- 		{
-- 			"<leader>d",
-- 			"",
-- 			desc = "+debug",
-- 			mode = { "n", "v" },
-- 		},
--
-- 		{
-- 			"<leader>dB",
-- 			function()
-- 				require("dap").set_breakpoint(vim.fn.input("Breakpoint condition: "))
-- 			end,
-- 			desc = "Breakpoint Condition",
-- 		},
--
-- 		{
-- 			"<leader>db",
-- 			function()
-- 				require("dap").toggle_breakpoint()
-- 			end,
-- 			desc = "Toggle Breakpoint",
-- 		},
--
-- 		{
-- 			"<leader>dc",
-- 			function()
-- 				require("dap").continue()
-- 			end,
-- 			desc = "Continue",
-- 		},
--
-- 		{
-- 			"<leader>da",
-- 			function()
-- 				require("dap").continue({ before = get_args })
-- 			end,
-- 			desc = "Run with Args",
-- 		},
--
-- 		{
-- 			"<leader>dC",
-- 			function()
-- 				require("dap").run_to_cursor()
-- 			end,
-- 			desc = "Run to Cursor",
-- 		},
--
-- 		{
-- 			"<leader>dg",
-- 			function()
-- 				require("dap").goto_()
-- 			end,
-- 			desc = "Go to Line (No Execute)",
-- 		},
--
-- 		{
-- 			"<leader>di",
-- 			function()
-- 				require("dap").step_into()
-- 			end,
-- 			desc = "Step Into",
-- 		},
--
-- 		{
-- 			"<leader>dj",
-- 			function()
-- 				require("dap").down()
-- 			end,
-- 			desc = "Down",
-- 		},
--
-- 		{
-- 			"<leader>dk",
-- 			function()
-- 				require("dap").up()
-- 			end,
-- 			desc = "Up",
-- 		},
--
-- 		{
-- 			"<leader>dl",
-- 			function()
-- 				require("dap").run_last()
-- 			end,
-- 			desc = "Run Last",
-- 		},
--
-- 		{
-- 			"<leader>do",
-- 			function()
-- 				require("dap").step_out()
-- 			end,
-- 			desc = "Step Out",
-- 		},
--
-- 		{
-- 			"<leader>dO",
-- 			function()
-- 				require("dap").step_over()
-- 			end,
-- 			desc = "Step Over",
-- 		},
--
-- 		{
-- 			"<leader>dp",
-- 			function()
-- 				require("dap").pause()
-- 			end,
-- 			desc = "Pause",
-- 		},
--
-- 		{
-- 			"<leader>dr",
-- 			function()
-- 				require("dap").repl.toggle()
-- 			end,
-- 			desc = "Toggle REPL",
-- 		},
--
-- 		{
-- 			"<leader>ds",
-- 			function()
-- 				require("dap").session()
-- 			end,
-- 			desc = "Session",
-- 		},
--
-- 		{
-- 			"<leader>dt",
-- 			function()
-- 				require("dap").terminate()
-- 			end,
-- 			desc = "Terminate",
-- 		},
--
-- 		{
-- 			"<leader>dw",
-- 			function()
-- 				require("dap.ui.widgets").hover()
-- 			end,
-- 			desc = "Widgets",
-- 		},
-- 	},
-- 	config = function()
-- 		-- Load mason-nvim-dap if it's available
-- 		if pcall(require, "mason-nvim-dap") then
-- 			require("mason-nvim-dap").setup {
-- 				automatic_installation = true,
-- 				ensure_installed = { "codelldb" }
-- 			}
-- 		end
--
-- 		-- Set highlight for stopped line
-- 		vim.api.nvim_set_hl(0, "DapStoppedLine", { default = true, link = "Visual" })
--
-- 		-- Define DAP signs
-- 		for name, sign in pairs(vim.config.icons.dap) do
-- 			sign = type(sign) == "table" and sign or { sign }
-- 			vim.fn.sign_define(
-- 				"Dap" .. name,
-- 				{ text = sign[1], texthl = sign[2] or "DiagnosticInfo", linehl = sign[3], numhl = sign[3] }
-- 			)
-- 		end
--
-- 		-- Setup DAP config from VsCode launch.json file
-- 		local vscode = require("dap.ext.vscode")
-- 		local json = require("plenary.json")
-- 		vscode.json_decode = function(str)
-- 			return vim.json.decode(json.json_strip_comments(str))
-- 		end
-- 	end,
-- }

return {
	"mfussenegger/nvim-dap",
	enabled = false,
	dependencies = {
		"rcarriga/nvim-dap-ui",
		"theHamstra/nvim-dap-virtual-text",
		"nvim-neotest/nvim-nio",
		"williamboman/mason.nvim",
	}
}
